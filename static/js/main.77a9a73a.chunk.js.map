{"version":3,"sources":["Certificate.tsx","App.tsx","postAddressSet.ts","reportWebVitals.ts","Footer.tsx","MembershipSetTable.tsx","ProofSet.tsx","getAddressSet.ts","index.tsx"],"names":["Certificate","isOpen","isClose","membershipProof","history","useHistory","onClose","value","variant","onClick","push","QUERY","gql","App","useState","minBalance","setMinBalance","maxBalance","setMaxBalance","size","setSize","showProof","setShowProof","showCertificate","setShowCertificate","setMembershipProof","proofElements","setProofElements","accounts","ethers","providers","Web3Provider","window","ethereum","getSigner","request","method","then","console","log","length","useLazyQuery","fetchPolicy","getUsers","data","loading","useEffect","set","proofHash","minUsdc","maxUsdc","addressSet","requestOptions","headers","accountTx","Map","txAccount","retrieveTxnsPromises","users","map","row","fetch","address","response","a","json","res","result","hash","Promise","all","txHashesNeeded","keys","acc","get","jsonRpcRequests","id","body","entity","signature","utils","joinSignature","v","r","s","signer","recoverPublicKey","JSON","stringify","postAddressSet","metadata","isRequired","mt","min","color","placeholder","onChange","e","parseInt","style","fontWeight","max","mb","columns","spacing","colorScheme","isLoading","variables","balance_gt","balance_lt","disabled","status","flexDirection","alignItems","justifyContent","textAlign","height","boxSize","mr","fontSize","maxWidth","icon","Copy","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Footer","bg","w","p","href","isExternal","MembershipSetTable","user","balance","ProofSet","useParams","setUsers","getAddressSet","record","client","ApolloClient","uri","cache","InMemoryCache","process","ReactDOM","render","StrictMode","ApolloProvider","direction","bgGradient","src","alt","basename","path","document","getElementById"],"mappings":"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","file":"static/js/main.77a9a73a.chunk.js","sourcesContent":["import {\n    Button,\n    Center,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalFooter,\n    ModalHeader,\n    ModalOverlay,\n} from '@chakra-ui/react';\nimport QRCode from 'react-qr-code';\nimport { useHistory } from 'react-router-dom';\n\nconst Certificate = ({ isOpen, isClose, membershipProof }: any) => {\n    let history = useHistory();\n\n    return (\n        <Modal isOpen={isOpen} onClose={isClose}>\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>Certificate</ModalHeader>\n                <ModalCloseButton />\n                <ModalBody>\n                    <Center>\n                        {/*<img src=\"./certificate.svg\" alt=\"\" />*/}\n                        <QRCode value={membershipProof} />\n                    </Center>\n                </ModalBody>\n\n                <ModalFooter>\n                    <Button\n                        variant=\"ghost\"\n                        onClick={() => history.push(`/${membershipProof}`)}\n                    >\n                        Print\n                    </Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    );\n};\n\nexport default Certificate;\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport {\n    Alert,\n    AlertDescription,\n    AlertIcon,\n    AlertTitle,\n    Button,\n    FormControl,\n    FormLabel,\n    IconButton,\n    Input,\n    NumberDecrementStepper,\n    NumberIncrementStepper,\n    NumberInput,\n    NumberInputField,\n    NumberInputStepper,\n    SimpleGrid,\n    Stack,\n} from '@chakra-ui/react';\nimport { gql, useLazyQuery } from '@apollo/client';\nimport { CopyIcon } from '@chakra-ui/icons';\nimport Certificate from './Certificate';\nimport { postAddressSet, postAddressSetBody } from './postAddressSet';\nimport { ethers, utils } from 'ethers';\n\nconst QUERY = gql`\n    query GetUsers($balance_gt: Int!, $balance_lt: Int!, $size: Int!) {\n        users(\n            first: $size\n            where: { balance_gt: $balance_gt, balance_lt: $balance_lt }\n        ) {\n            address\n            balance\n        }\n    }\n`;\n\nconst App = () => {\n    const [minBalance, setMinBalance] = useState<number>(100);\n    const [maxBalance, setMaxBalance] = useState<number>(200);\n    const [size, setSize] = useState<number>(200);\n    const [showProof, setShowProof] = useState(false);\n    const [showCertificate, setShowCertificate] = useState(false);\n    const [membershipProof, setMembershipProof] = useState('345345tsdfga');\n    const [proofElements, setProofElements] = useState<\n        postAddressSetBody | any\n    >({});\n\n    // @ts-ignore\n    const provider = new ethers.providers.Web3Provider(window?.ethereum);\n    const signer = provider.getSigner();\n    // @ts-ignore\n    const accounts = window?.ethereum\n        ?.request({\n            method: 'eth_requestAccounts',\n        })\n        .then(() => {\n            console.log('accounts', accounts[0]);\n            if (accounts.length && typeof accounts[0] === 'string') {\n                // return accounts[0];\n            }\n        });\n\n    const [getUsers, { data, loading }] = useLazyQuery(QUERY, {\n        fetchPolicy: 'network-only',\n    });\n\n    useEffect(() => {\n        console.log('data', data);\n        if (data) {\n            const set: postAddressSetBody = {\n                proofHash: 'dfsdf',\n                minUsdc: minBalance,\n                maxUsdc: maxBalance,\n                setSize: size,\n                addressSet: { data },\n            };\n\n            const requestOptions = {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            };\n            console.log('data', data);\n            const accountTx = new Map<string, string>();\n            const txAccount = new Map<string, string>();\n            const retrieveTxnsPromises: Promise<any>[] = data.users.map(\n                (row: any) =>\n                    fetch(\n                        `https://api.etherscan.io/api?module=account&action=txlist&address=${row.address}&startblock=0&endblock=99999999&page=1&offset=10&sort=asc&apikey=9SQ26N4VERJTXBWXQ4H94X4X98UZ4VFPHB`,\n                        requestOptions,\n                    ).then(async (response) => {\n                        const res = await response.json();\n                        accountTx.set(row.address, res.result[0].hash);\n                        txAccount.set(res.result[0].hash, row.address);\n                    }),\n            );\n            // {\"jsonrpc\":\"2.0\",\"method\":\"eth_getTransactionByHash\",\"params\":[\"0x773b94e1e2381f0c1f0b366245145a31369a7311e53778e4b085a203c64f19a3\"],\"id\":0}\n            (async () => {\n                const responses = await Promise.all(retrieveTxnsPromises);\n                const accountPubKey = new Map<string, string>();\n                // @ts-ignore\n                const txHashesNeeded = [...accountTx.keys()].map((acc) => {\n                    return accountTx.get(acc)!;\n                });\n\n                const jsonRpcRequests = txHashesNeeded.map((hash, id) => {\n                    return `{\"jsonrpc\":\"2.0\",\"method\":\"eth_getTransactionByHash\",\"params\":[\"${hash}\"],\"id\":${id}}`;\n                });\n\n                console.log('[' + jsonRpcRequests + ']');\n\n                // @ts-ignore\n                const rpcResponse = fetch(\n                    'https://eth-mainnet.alchemyapi.io/v2/wCzaTDAfLI6S5Mdc2suiOXcpf7Xzlk_w',\n                    {\n                        method: 'POST',\n                        body: '[' + jsonRpcRequests + ']',\n                    },\n                )\n                    .then((res: any) => res.json())\n                    .then((data: any) => {\n                        console.log(data);\n\n                        data.map((entity: any) => {\n                            const signature = utils.joinSignature({\n                                v: entity.result.v,\n                                r: entity.result.r,\n                                s: entity.result.s,\n                            });\n                            const signer = utils.recoverPublicKey(\n                                entity.result.hash,\n                                signature,\n                            );\n                            console.log(signer);\n                        });\n                    });\n            })();\n\n            // const txToAccount = responses.map((res) => ({\n            //     account: res.data.account,\n            //     txHash: res.data.txns[0].hash,\n            // }));\n\n            postAddressSet(set).then((r: any) => {\n                console.log(r);\n                setMembershipProof(r.metadata.id);\n                setShowProof(true);\n            });\n        }\n    }, [data]);\n\n    return (\n        <Stack>\n            <FormControl id=\"min\" isRequired>\n                <FormLabel mt={10}>Message</FormLabel>\n                <Input\n                    min={0}\n                    color={'tomato'}\n                    variant=\"filled\"\n                    placeholder=\"Alice proofs Bob that she owns 100 USDC\"\n                    onChange={(e: any) => setMinBalance(parseInt(e))}\n                    style={{ fontWeight: 'bold' }}\n                />\n            </FormControl>\n\n            <FormControl id=\"min\" isRequired>\n                <FormLabel mt={10}>Minimum USDC Balance</FormLabel>\n                <NumberInput\n                    min={0}\n                    color={'tomato'}\n                    variant=\"filled\"\n                    onChange={(e: string) => setMinBalance(parseInt(e))}\n                >\n                    <NumberInputField style={{ fontWeight: 'bold' }} />\n                </NumberInput>\n            </FormControl>\n\n            <FormControl id=\"max\" isRequired>\n                <FormLabel>Maximum USDC Balance</FormLabel>\n                <NumberInput\n                    color={'tomato'}\n                    variant=\"filled\"\n                    min={0}\n                    onChange={(e: string) => setMaxBalance(parseInt(e))}\n                >\n                    <NumberInputField style={{ fontWeight: 'bold' }} />\n                </NumberInput>\n            </FormControl>\n\n            <FormControl id=\"address\" isRequired>\n                <FormLabel>Size of Address Set</FormLabel>\n                <NumberInput\n                    color={'tomato'}\n                    variant=\"filled\"\n                    min={1}\n                    max={5}\n                    onChange={(e: string) => {\n                        setSize(parseInt(e));\n                        console.log(size);\n                    }}\n                >\n                    <NumberInputField />\n                    <NumberInputStepper>\n                        <NumberIncrementStepper />\n                        <NumberDecrementStepper />\n                    </NumberInputStepper>\n                </NumberInput>\n            </FormControl>\n\n            <FormControl id=\"amount\" isRequired>\n                <FormLabel>Your address</FormLabel>\n                <NumberInput\n                    min={0}\n                    mb={10}\n                    onChange={(e: string) => {\n                        // setSize(parseInt(e));\n                        console.log(e);\n                    }}\n                >\n                    <Input\n                        color={'tomato'}\n                        variant=\"filled\"\n                        placeholder=\"0xBc11295936Aa79d594139de1B2e12629414F3BDB\"\n                        style={{ fontWeight: 'bold' }}\n                    />\n                </NumberInput>\n            </FormControl>\n\n            <SimpleGrid columns={2} spacing={5}>\n                <Button\n                    variant=\"solid\"\n                    colorScheme=\"orange\"\n                    isLoading={loading}\n                    onClick={() =>\n                        getUsers({\n                            variables: {\n                                balance_gt: minBalance,\n                                balance_lt: maxBalance,\n                                size: size,\n                            },\n                        })\n                    }\n                >\n                    Generate Proof\n                </Button>\n\n                <Button\n                    disabled={!showProof}\n                    onClick={() => {\n                        setProofElements({\n                            minBalance: minBalance,\n                            maxBalance: maxBalance,\n                            size: size,\n                        });\n                        setShowCertificate(true);\n                    }}\n                >\n                    Mint certificate\n                </Button>\n            </SimpleGrid>\n\n            {showProof && (\n                <Alert\n                    status=\"success\"\n                    variant=\"subtle\"\n                    flexDirection=\"column\"\n                    alignItems=\"center\"\n                    justifyContent=\"center\"\n                    textAlign=\"center\"\n                    height=\"200px\"\n                >\n                    <AlertIcon boxSize=\"40px\" mr={0} />\n                    <AlertTitle mt={4} mb={1} fontSize=\"lg\">\n                        Proof generated!\n                    </AlertTitle>\n                    <AlertDescription maxWidth=\"sm\">\n                        {membershipProof} {console.log(proofElements)}\n                        <IconButton\n                            aria-label=\"copy\"\n                            colorScheme={'green'}\n                            size={'xs'}\n                            variant=\"outline\"\n                            icon={<CopyIcon />}\n                        />\n                    </AlertDescription>\n                </Alert>\n            )}\n            <Certificate\n                isOpen={showCertificate}\n                isClose={() => setShowCertificate(false)}\n                membershipProof={membershipProof}\n            />\n        </Stack>\n    );\n};\n\nexport default App;\n","export interface postAddressSetBody {\n    proofHash: string;\n    minUsdc: number;\n    maxUsdc: number;\n    setSize: number;\n    addressSet: Object;\n}\n\nexport const postAddressSet = (body: postAddressSetBody) => {\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'X-Master-Key':\n                '$2b$10$rJt/jHy0W/OoJaX3Som3lu7NepipWzBp/QviO0c28o8Zad0.0RHaO',\n        },\n        body: JSON.stringify(body),\n    };\n\n    return fetch('https://api.jsonbin.io/v3/b', requestOptions).then(\n        (response) => response.json(),\n    );\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Box, Link } from '@chakra-ui/react';\n\nconst Footer = () => {\n    return (\n        <Box bg={'orange.500'} w=\"100%\" p={4} mt={20}>\n            Crafted by the{' '}\n            <Link href=\"https://nethermind.io/\" isExternal>\n                Nethermind team\n            </Link>\n        </Box>\n    );\n};\n\nexport default Footer;\n","import { Table, Tbody, Th, Thead, Tr } from '@chakra-ui/react';\n\nconst MembershipSetTable = ({ users }: any) => {\n    return (\n        users && (\n            <Table variant=\"simple\" mt={20} colorScheme={'orange'}>\n                <Thead>\n                    <Tr>\n                        <Th>Address</Th>\n                        <Th>Balance</Th>\n                    </Tr>\n                </Thead>\n                <Tbody>\n                    {users.map((user: any) => (\n                        <Tr>\n                            <Th>{user.address}</Th>\n                            <Th>{user.balance}</Th>\n                        </Tr>\n                    ))}\n                </Tbody>\n            </Table>\n        )\n    );\n};\n\nexport default MembershipSetTable;\n","import MembershipSetTable from './MembershipSetTable';\nimport { useEffect, useState } from 'react';\nimport { getAddressSet } from './getAddressSet';\nimport { useParams } from 'react-router-dom';\n\nconst ProofSet = () => {\n    let { proofHash } = useParams<any>();\n    const [users, setUsers] = useState<any[]>([]);\n    console.log('proofHash', proofHash);\n    useEffect(() => {\n        getAddressSet(proofHash).then((data: any) => {\n            setUsers(data.record.addressSet.data.users);\n        });\n    }, []);\n\n    return <MembershipSetTable users={users} />;\n};\n\nexport default ProofSet;\n","export const getAddressSet = (proofHash: string) => {\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json',\n            'X-Master-Key':\n                '$2b$10$rJt/jHy0W/OoJaX3Som3lu7NepipWzBp/QviO0c28o8Zad0.0RHaO',\n        },\n    };\n\n    return fetch(\n        `https://api.jsonbin.io/v3/b/${proofHash}/latest`,\n        requestOptions,\n    ).then((response) => response.json());\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Box, ChakraProvider, Container, Flex, Stack } from '@chakra-ui/react';\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\nimport Footer from './Footer';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport ProofSet from './ProofSet';\n\nconst client = new ApolloClient({\n    uri: 'https://api.thegraph.com/subgraphs/name/centrehq/usdc',\n    cache: new InMemoryCache(),\n});\n\nconsole.log('process.env.PUBLIC_URL', process.env.PUBLIC_URL);\n\nReactDOM.render(\n    <React.StrictMode>\n        <ChakraProvider>\n            <ApolloProvider client={client}>\n                <Flex\n                    style={{ height: '100vh' }}\n                    direction={'column'}\n                    justifyContent={'space-between'}\n                >\n                    <Box bgGradient=\"linear(to-b, orange.50, transparent)\">\n                        <Container>\n                            <Stack>\n                                <img src=\"./logo.svg\" alt=\"\" />\n                                <BrowserRouter\n                                    basename={process.env.PUBLIC_URL}\n                                >\n                                    <Switch>\n                                        <Route path=\"/:proofHash\">\n                                            <ProofSet />\n                                        </Route>\n                                        <Route path=\"/\">\n                                            <App />\n                                        </Route>\n                                    </Switch>\n                                </BrowserRouter>\n                            </Stack>\n                        </Container>\n                    </Box>\n                    <Footer />\n                </Flex>\n            </ApolloProvider>\n        </ChakraProvider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}